import RPi.GPIO as GPIO
import time
import threading

# Configuración del pin GPIO para el servo
PIN_SERVO = 12

# Configuración del pin GPIO para el sensor ultrasónico
PIN_TRIGGER = 11
PIN_ECHO = 13

# Configuración de los pines GPIO para el módulo MD08A
pin_in1 = 16
pin_in2 = 18
pin_pwma = 32
pin_stby = 37 

GPIO.setmode(GPIO.BOARD)
GPIO.setup(PIN_SERVO, GPIO.OUT)
GPIO.setup(PIN_TRIGGER, GPIO.OUT)
GPIO.setup(PIN_ECHO, GPIO.IN)

# Configura los pines GPIO como salidas para el módulo MD08A
GPIO.setup(pin_in1, GPIO.OUT)
GPIO.setup(pin_in2, GPIO.OUT)
GPIO.setup(pin_pwma, GPIO.OUT)
GPIO.setup(pin_stby, GPIO.OUT)

# Crea un objeto PWM para controlar el pin PWMA (para el motor)
pwm = GPIO.PWM(pin_pwma, 1000)  # 1000 Hz como frecuencia PWM (puedes ajustarla si es necesario)


# Variable para mantener el estado actual del servo
current_servo_angle = 90

# Activa el STBY para activar los motores
GPIO.output(pin_stby, GPIO.HIGH)

# Función para mover el servo a un ángulo específico (0 a 180 grados)
def set_servo_angle(angle):
    GPIO.setmode(GPIO.BOARD) 
    GPIO.setup(PIN_SERVO, GPIO.OUT)
    angle = max(0, min(180, angle))
    duty = 2.5 + (angle / 90) * 10
    GPIO.output(PIN_SERVO, True)
    servo.ChangeDutyCycle(duty)
    time.sleep(0.5)  # Permite tiempo para que el servo alcance la posición
    GPIO.output(PIN_SERVO, False)
    servo.ChangeDutyCycle(0)  # Detiene el servo

# Función para medir la distancia usando el sensor ultrasónico
def measure_distance():
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(PIN_TRIGGER, GPIO.OUT)
    GPIO.setup(PIN_ECHO, GPIO.IN)
    GPIO.output(PIN_TRIGGER, GPIO.HIGH)
    time.sleep(0.000001)
    GPIO.output(PIN_TRIGGER, GPIO.LOW)

    start_time = time.time()
    end_time = time.time()

    while GPIO.input(PIN_ECHO) == 0:
        start_time = time.time()

    while GPIO.input(PIN_ECHO) == 1:
        end_time = time.time()

    duration = end_time - start_time
    distance = (duration * 34300) / 2  # Velocidad del sonido en el aire a 20°C es 343 m/s
    return distance

# Función para girar el motor hacia adelante durante una duración específica
def forward(duration_giro):
    GPIO.output(pin_in1, GPIO.HIGH)
    GPIO.output(pin_in2, GPIO.LOW)
    pwm.start(80)
    time.sleep(duration_giro)
    pwm.stop()

# Función para detener el motor
def stop_motor():
    GPIO.output(pin_in1, GPIO.LOW)
    GPIO.output(pin_in2, GPIO.LOW)

# Función de calibración del servo
def calibration():
    # Mover el servo de 30 a 90 grados para calibrar
    for angle in range(30, 91, 10):
        set_servo_angle(angle)
        distance = measure_distance()
        print("Ángulo: {} grados, Distancia: {:.2f} cm".format(angle, distance))
    
    # Dejar el servo centrado en 90 grados al final de la calibración
    set_servo_angle(10)
# Función para controlar el sensor ultrasónico y ajustar el servo según la distancia
def ultrasonic_thread():
    global current_servo_angle
    try:
        while True:
            distance = measure_distance()
            print("Distancia: {:.2f} cm".format(distance))

            if distance <= 50:
                #stop_motor()
                if current_servo_angle != 90:
                    set_servo_angle(90)  # Gira a la derecha (ángulo de 90 grados) solo si el servo no está en esa posición
                    current_servo_angle = 90
            else:
                forward(3)
                if current_servo_angle != 10:
                    set_servo_angle(10)  # Mantener el ángulo de 10 grados solo si el servo no está en esa posición
                    current_servo_angle = 10

            time.sleep(1)  # Esperar 1 segundo antes de realizar otra lectura

    except KeyboardInterrupt:
        pass

try:
    # Iniciar el objeto PWM del servo
    servo = GPIO.PWM(PIN_SERVO, 50)  # Frecuencia de 50 Hz para la mayoría de los servos
    servo.start(0)

    # Realizar la calibración al encender el programa
    calibration()

    # Esperar 2 segundos antes de encender el motor
    time.sleep(2)

    # Crear y arrancar el hilo para controlar el sensor ultrasónico
    ultrasonic_thread = threading.Thread(target=ultrasonic_thread)
    ultrasonic_thread.start()

    # Encender el motor DC hacia adelante durante 30 segundos
    forward(13)

    # Detener el motor
    stop_motor()

except KeyboardInterrupt:
    pass

finally:
    # Detener el servo, detener el motor y liberar los pines GPIO al salir
    servo.stop()
    stop_motor()
    GPIO.cleanup()
